Index: examples/SimpleSimulation.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import networkx as nx\\n\",\n    \"import pickhardtpayments as pp\\n\",\n    \"import random\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"graph = pp.ChannelGraph(\\\"channels.sample.json\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class SimulatedOracle(pp.OracleLightningNetwork):\\n\",\n    \"    def __init__(self,channel_graph):\\n\",\n    \"        super().__init__(channel_graph)\\n\",\n    \"    \\n\",\n    \"    def conduct_payment(self,src,dest,amt):\\n\",\n    \"        if self.network.has_edge(dest, src):\\n\",\n    \"            items = self.network[src][dest]\\n\",\n    \"            for short_channel_id, channel in items.items():\\n\",\n    \"                channel = channel[\\\"channel\\\"]\\n\",\n    \"                if channel.can_forward(amt):\\n\",\n    \"                    channel.actual_liquidity = channel.actual_liquidity - amt\\n\",\n    \"                    other_channel= self.network[dest][src][short_channel_id][\\\"channel\\\"]\\n\",\n    \"                    other_channel.actual_liquidity = other_channel.actual_liquidity + amt\\n\",\n    \"                    return True\\n\",\n    \"        return False\\n\",\n    \"\\n\",\n    \"    def _next_hop(self, path):\\n\",\n    \"        \\\"\\\"\\\"                                                                                                 \\n\",\n    \"        generator to iterate through edges indext by node id of paths                                       \\n\",\n    \"                                                                                                            \\n\",\n    \"        The path is a list of node ids. Each call returns a tuple src, dest of an edge in the path          \\n\",\n    \"        \\\"\\\"\\\"\\n\",\n    \"        for i in range(1, len(path)):\\n\",\n    \"            src = path[i-1]\\n\",\n    \"            dest = path[i]\\n\",\n    \"            yield (src, dest)\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"    def settle_payment(self, path, amt):\\n\",\n    \"        channels = []\\n\",\n    \"        for src, dest in self._next_hop(path):\\n\",\n    \"            fwd = False\\n\",\n    \"            if self.network.has_edge(dest, src):\\n\",\n    \"                items = self.network[src][dest]\\n\",\n    \"                for short_channel_id, channel in items.items():\\n\",\n    \"                    channel = channel[\\\"channel\\\"]\\n\",\n    \"                    if channel.can_forward(amt):\\n\",\n    \"                        fwd = True\\n\",\n    \"                        channels.append(channel)\\n\",\n    \"                        break\\n\",\n    \"            if fwd==False:\\n\",\n    \"                return False\\n\",\n    \"        for channel in channels:\\n\",\n    \"            channel.actual_liquidity = channel.actual_liquidity - amt\\n\",\n    \"            other_channel= self.network[channel.dest][channel.src][channel.short_channel_id][\\\"channel\\\"]\\n\",\n    \"            other_channel.actual_liquidity = other_channel.actual_liquidity + amt\\n\",\n    \"        return True\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"s = SimulatedOracle(graph)\\n\",\n    \"nodes = list(s.network.nodes())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def get_payment_pair(nodes):\\n\",\n    \"    src = random.choice(nodes)\\n\",\n    \"    dest = src\\n\",\n    \"    while dest == src:\\n\",\n    \"        dest = random.choice(nodes)\\n\",\n    \"    return src, dest\\n\",\n    \"\\n\",\n    \"def generate_payment_pairs(nodes, num_pairs =1000_000):\\n\",\n    \"    res = []\\n\",\n    \"    amts = list(i for i in range(1,100))\\n\",\n    \"    for i in range(num_pairs):\\n\",\n    \"        src,dest = get_payment_pair(nodes)\\n\",\n    \"        amt = random.choice(amts)\\n\",\n    \"        res.append((src,dest,amt))\\n\",\n    \"    return res\\n\",\n    \"\\n\",\n    \"def compute_total_flows(txs,nodes):\\n\",\n    \"    flows = {n:0 for n in nodes}\\n\",\n    \"    for src,dest, amt in txs:\\n\",\n    \"        flows[src]-=amt\\n\",\n    \"        flows[dest]+=amt\\n\",\n    \"    return flows\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'A': 24399, 'B': -9113, 'C': 15348, 'D': -30634}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"txs = generate_payment_pairs(nodes)\\n\",\n    \"print(compute_total_flows(txs,nodes))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0\\n\",\n      \"payments: 20000 failed_payment_rate: 0.0 attempts: 22360 fa: 2360 failed_attempts_rate: 0.118\\n\",\n      \"payments: 40000 failed_payment_rate: 0.0 attempts: 48483 fa: 8483 failed_attempts_rate: 0.212075\\n\",\n      \"payments: 60000 failed_payment_rate: 0.0 attempts: 75312 fa: 15312 failed_attempts_rate: 0.2552\\n\",\n      \"payments: 80000 failed_payment_rate: 0.0 attempts: 101799 fa: 21799 failed_attempts_rate: 0.2724875\\n\",\n      \"payments: 100000 failed_payment_rate: 0.0 attempts: 128249 fa: 28249 failed_attempts_rate: 0.28249\\n\",\n      \"payments: 120000 failed_payment_rate: 0.0 attempts: 154563 fa: 34563 failed_attempts_rate: 0.288025\\n\",\n      \"payments: 140000 failed_payment_rate: 0.0 attempts: 181393 fa: 41393 failed_attempts_rate: 0.2956642857142857\\n\",\n      \"payments: 160000 failed_payment_rate: 0.0 attempts: 207998 fa: 47998 failed_attempts_rate: 0.2999875\\n\",\n      \"payments: 180000 failed_payment_rate: 0.0 attempts: 234674 fa: 54674 failed_attempts_rate: 0.30374444444444443\\n\",\n      \"payments: 200000 failed_payment_rate: 0.0 attempts: 260533 fa: 60533 failed_attempts_rate: 0.302665\\n\",\n      \"payments: 220000 failed_payment_rate: 0.0 attempts: 287294 fa: 67294 failed_attempts_rate: 0.3058818181818182\\n\",\n      \"payments: 240000 failed_payment_rate: 0.0 attempts: 313161 fa: 73161 failed_attempts_rate: 0.3048375\\n\",\n      \"payments: 260000 failed_payment_rate: 0.0 attempts: 339052 fa: 79052 failed_attempts_rate: 0.30404615384615385\\n\",\n      \"payments: 280000 failed_payment_rate: 0.0 attempts: 365021 fa: 85021 failed_attempts_rate: 0.3036464285714286\\n\",\n      \"payments: 300000 failed_payment_rate: 0.0 attempts: 390940 fa: 90940 failed_attempts_rate: 0.3031333333333333\\n\",\n      \"payments: 320000 failed_payment_rate: 0.0 attempts: 417611 fa: 97611 failed_attempts_rate: 0.305034375\\n\",\n      \"payments: 340000 failed_payment_rate: 0.0 attempts: 444440 fa: 104440 failed_attempts_rate: 0.3071764705882353\\n\",\n      \"payments: 360000 failed_payment_rate: 0.0 attempts: 470959 fa: 110959 failed_attempts_rate: 0.30821944444444443\\n\",\n      \"payments: 380000 failed_payment_rate: 0.0 attempts: 497259 fa: 117259 failed_attempts_rate: 0.3085763157894737\\n\",\n      \"payments: 400000 failed_payment_rate: 0.0 attempts: 523661 fa: 123661 failed_attempts_rate: 0.3091525\\n\",\n      \"payments: 420000 failed_payment_rate: 0.0 attempts: 550081 fa: 130081 failed_attempts_rate: 0.30971666666666664\\n\",\n      \"payments: 440000 failed_payment_rate: 0.0 attempts: 576196 fa: 136196 failed_attempts_rate: 0.3095363636363636\\n\",\n      \"payments: 460000 failed_payment_rate: 0.0 attempts: 602841 fa: 142841 failed_attempts_rate: 0.31052391304347826\\n\",\n      \"payments: 480000 failed_payment_rate: 0.0 attempts: 629731 fa: 149731 failed_attempts_rate: 0.3119395833333333\\n\",\n      \"payments: 500000 failed_payment_rate: 0.0 attempts: 656280 fa: 156280 failed_attempts_rate: 0.31256\\n\",\n      \"payments: 520000 failed_payment_rate: 0.0 attempts: 682731 fa: 162731 failed_attempts_rate: 0.3129442307692308\\n\",\n      \"payments: 540000 failed_payment_rate: 0.0 attempts: 708982 fa: 168982 failed_attempts_rate: 0.3129296296296296\\n\",\n      \"payments: 560000 failed_payment_rate: 0.0 attempts: 735327 fa: 175327 failed_attempts_rate: 0.3130839285714286\\n\",\n      \"payments: 580000 failed_payment_rate: 0.0 attempts: 761265 fa: 181265 failed_attempts_rate: 0.31252586206896554\\n\",\n      \"payments: 600000 failed_payment_rate: 0.0 attempts: 787159 fa: 187159 failed_attempts_rate: 0.31193166666666666\\n\",\n      \"payments: 620000 failed_payment_rate: 0.0 attempts: 813446 fa: 193446 failed_attempts_rate: 0.3120096774193548\\n\",\n      \"payments: 640000 failed_payment_rate: 0.0 attempts: 839079 fa: 199079 failed_attempts_rate: 0.3110609375\\n\",\n      \"payments: 660000 failed_payment_rate: 0.0 attempts: 864818 fa: 204818 failed_attempts_rate: 0.310330303030303\\n\",\n      \"payments: 680000 failed_payment_rate: 0.0 attempts: 890644 fa: 210644 failed_attempts_rate: 0.30977058823529413\\n\",\n      \"payments: 700000 failed_payment_rate: 0.0 attempts: 916758 fa: 216758 failed_attempts_rate: 0.3096542857142857\\n\",\n      \"payments: 720000 failed_payment_rate: 0.0 attempts: 942674 fa: 222674 failed_attempts_rate: 0.30926944444444443\\n\",\n      \"payments: 740000 failed_payment_rate: 0.0 attempts: 968614 fa: 228614 failed_attempts_rate: 0.30893783783783785\\n\",\n      \"payments: 760000 failed_payment_rate: 0.0 attempts: 994627 fa: 234627 failed_attempts_rate: 0.30871973684210524\\n\",\n      \"payments: 780000 failed_payment_rate: 0.0 attempts: 1020110 fa: 240110 failed_attempts_rate: 0.30783333333333335\\n\",\n      \"payments: 800000 failed_payment_rate: 0.0 attempts: 1045700 fa: 245700 failed_attempts_rate: 0.307125\\n\",\n      \"payments: 820000 failed_payment_rate: 0.0 attempts: 1071315 fa: 251315 failed_attempts_rate: 0.3064817073170732\\n\",\n      \"payments: 840000 failed_payment_rate: 0.0 attempts: 1096993 fa: 256993 failed_attempts_rate: 0.30594404761904764\\n\",\n      \"payments: 860000 failed_payment_rate: 0.0 attempts: 1122850 fa: 262850 failed_attempts_rate: 0.3056395348837209\\n\",\n      \"payments: 880000 failed_payment_rate: 0.0 attempts: 1148718 fa: 268718 failed_attempts_rate: 0.3053613636363636\\n\",\n      \"payments: 900000 failed_payment_rate: 0.0 attempts: 1174482 fa: 274482 failed_attempts_rate: 0.30498\\n\",\n      \"payments: 920000 failed_payment_rate: 0.0 attempts: 1200660 fa: 280660 failed_attempts_rate: 0.3050652173913043\\n\",\n      \"payments: 940000 failed_payment_rate: 0.0 attempts: 1226324 fa: 286324 failed_attempts_rate: 0.3046\\n\",\n      \"payments: 960000 failed_payment_rate: 0.0 attempts: 1252407 fa: 292407 failed_attempts_rate: 0.304590625\\n\",\n      \"payments: 980000 failed_payment_rate: 0.0 attempts: 1278529 fa: 298529 failed_attempts_rate: 0.3046214285714286\\n\",\n      \"payments: 1000000 failed_payment_rate: 0.0 attempts: 1304175 fa: 304175 failed_attempts_rate: 0.304175\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"uncertainty_network = pp.UncertaintyNetwork(graph)\\n\",\n    \"\\n\",\n    \"graph = nx.DiGraph()\\n\",\n    \"for src,dest,key, channel in uncertainty_network.network.edges(data = \\\"channel\\\", keys=True):\\n\",\n    \"    #channel = uncertainty_network.network[src][dest][\\\"channel\\\"]\\n\",\n    \"    graph.add_edge(src,dest,channel = channel, cost = channel.linearized_integer_routing_unit_cost())\\n\",\n    \"    #print(src,dest)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"paths = {n: {} for n in nodes}\\n\",\n    \"for n in nodes:\\n\",\n    \"    for m in nodes:\\n\",\n    \"        if n==m:\\n\",\n    \"            continue\\n\",\n    \"        #res = nx.dijkstra_path(graph, n,m,weight=\\\"cost\\\")\\n\",\n    \"        res = nx.all_simple_paths(graph,n,m,cutoff=5)\\n\",\n    \"        paths[n][m]=[p for p in res]\\n\",\n    \"        #print(res)\\n\",\n    \"cnt = 0\\n\",\n    \"print(cnt)\\n\",\n    \"suc = 0\\n\",\n    \"fail = 0\\n\",\n    \"attempts = 0\\n\",\n    \"fa = 0\\n\",\n    \"for src,dest,amt in txs:\\n\",\n    \"    #session.pickhardt_pay(src,dest,amt)\\n\",\n    \"    #res = nx.dijkstra_path(graph, src,dest,weight=\\\"cost\\\")\\n\",\n    \"    failed = True\\n\",\n    \"    for path in paths[src][dest]: \\n\",\n    \"        res = s.settle_payment(path, amt)\\n\",\n    \"        attempts +=1\\n\",\n    \"        if res == True:\\n\",\n    \"            suc +=1\\n\",\n    \"            failed = False\\n\",\n    \"            break\\n\",\n    \"        else:\\n\",\n    \"            fa +=1\\n\",\n    \"    if failed == True:\\n\",\n    \"        fail+=1\\n\",\n    \"    cnt +=1\\n\",\n    \"    if cnt % 20_000 == 0:\\n\",\n    \"        print(\\\"payments: {} failed_payment_rate: {} attempts: {} fa: {} failed_attempts_rate: {}\\\".format(\\n\",\n    \"            cnt, \\n\",\n    \"            float(fail)/cnt, \\n\",\n    \"            attempts,\\n\",\n    \"            fa,\\n\",\n    \"            float(attempts-cnt)/cnt))\\n\",\n    \"        #break\\n\",\n    \"    #print(a,b)\\n\",\n    \"    #break\\n\",\n    \"    #oracle.send_onion([src,dest],amt)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'A': {'B': [['A', 'B'], ['A', 'C', 'B'], ['A', 'D', 'B']],\\n\",\n       \"  'C': [['A', 'B', 'C'], ['A', 'C'], ['A', 'D', 'B', 'C']],\\n\",\n       \"  'D': [['A', 'B', 'D'], ['A', 'C', 'B', 'D'], ['A', 'D']]},\\n\",\n       \" 'B': {'A': [['B', 'A'], ['B', 'C', 'A'], ['B', 'D', 'A']],\\n\",\n       \"  'C': [['B', 'A', 'C'], ['B', 'C'], ['B', 'D', 'A', 'C']],\\n\",\n       \"  'D': [['B', 'A', 'D'], ['B', 'C', 'A', 'D'], ['B', 'D']]},\\n\",\n       \" 'C': {'A': [['C', 'B', 'A'], ['C', 'B', 'D', 'A'], ['C', 'A']],\\n\",\n       \"  'B': [['C', 'B'], ['C', 'A', 'B'], ['C', 'A', 'D', 'B']],\\n\",\n       \"  'D': [['C', 'B', 'A', 'D'],\\n\",\n       \"   ['C', 'B', 'D'],\\n\",\n       \"   ['C', 'A', 'B', 'D'],\\n\",\n       \"   ['C', 'A', 'D']]},\\n\",\n       \" 'D': {'A': [['D', 'A'], ['D', 'B', 'A'], ['D', 'B', 'C', 'A']],\\n\",\n       \"  'B': [['D', 'A', 'B'], ['D', 'A', 'C', 'B'], ['D', 'B']],\\n\",\n       \"  'C': [['D', 'A', 'B', 'C'],\\n\",\n       \"   ['D', 'A', 'C'],\\n\",\n       \"   ['D', 'B', 'A', 'C'],\\n\",\n       \"   ['D', 'B', 'C']]}}\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"paths\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"['A', 'B']\\n\",\n      \"['A', 'C', 'B']\\n\",\n      \"['A', 'D', 'B']\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = nx.all_simple_paths(graph,\\\"A\\\",\\\"B\\\",cutoff=5)\\n\",\n    \"for path in x:\\n\",\n    \"    print(path)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# TODOS:\\n\",\n    \"\\n\",\n    \"* account fees\\n\",\n    \"* add strategies\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.63072\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"0.002 * 1_000 * 3600*24 * 365 / 100_000_000\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"46.8\"\n      ]\n     },\n     \"execution_count\": 14,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"3.9*12\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n
===================================================================
diff --git a/examples/SimpleSimulation.ipynb b/examples/SimpleSimulation.ipynb
--- a/examples/SimpleSimulation.ipynb	
+++ b/examples/SimpleSimulation.ipynb	
@@ -387,4 +387,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 4
-}
+}
\ No newline at end of file
